#!/usr/bin/env python2
# -*- mode: python -*-

import sys
import os

from pheweb.load import phenolist
from pheweb.load import get_cpras
from pheweb.load import merge_cpras
from pheweb.load import download_rsids
from pheweb.load import download_genes
from pheweb.load import add_rsids
from pheweb.load import make_tries
from pheweb.load import standardize_phenos
from pheweb.load import make_manhattan
from pheweb.load import make_qq
from pheweb.load import make_matrix
from pheweb.load import bgzip_phenos
from pheweb.load import top_loci
from pheweb.load import process_assoc_files

def serve_run(argv):
    from pheweb.serve import server
    server.run(argv)

handlers = {}
handlers['phenolist'] = phenolist.run
handlers['get-cpras'] = get_cpras.run
handlers['merge-cpras'] = merge_cpras.run
handlers['download-rsids'] = download_rsids.run
handlers['download-genes'] = download_genes.run
handlers['add-rsids'] = add_rsids.run
handlers['make-tries'] = make_tries.run
handlers['standarize-phenos'] = standardize_phenos.run
handlers['make-manhattan'] = make_manhattan.run
handlers['make-qq'] = make_qq.run
handlers['make-matrix'] = make_matrix.run
handlers['bgzip-phenos'] = bgzip_phenos.run
handlers['top-loci'] = top_loci.run
handlers['process-assoc-files'] = process_assoc_files.run
handlers['serve'] = serve_run


def help():
    print('''
To see more information about a subcommand, run that command followed by `-h`.

Subcommands:

    pheweb phenolist
        prepare a list of phenotypes

    pheweb process-assoc-files
        once a phenolist has been prepared, load all data to be ready to run the server.

    pheweb serve
        host a webserver
''')

subcommand = sys.argv[1] if len(sys.argv)>1 else ''
if subcommand in ['', '-h', '--help']:
    help()
elif subcommand not in handlers:
    print('Unknown subcommand {!r}'.format(subcommand))
    help()
else:
    handlers[subcommand](sys.argv[2:])



'''
move all pheweb-generated data into `$dir/generated-by-pheweb/`.

make a subcommand `./pheweb quickstart '/tmp/phe([0-9]+).tsv.gz'`
- makes dir=`~/.pheweb/mine/my-phewebs/$RANDOM/`
- prepares $dir/pheno-list.json
- tells user to `cd $dir && pheweb prepar-assoc-files`
- runs `pheweb serve`
    - could it open a web browser?  how to do that on linux?  only if on macOS?
    - could it find its own external IP, attempt to contact itself, and then provide a link if it works?
    - and otherwise, it would just print or link to instructions?

to make templates configurable:
- use `$data_dir/custom_templates/`
- option 1: (nope)
    - make own templates that extend defaults
    - tell flask to use them
- option 2: (yep)
    - put `custom_templates/` FIRST
    - `region.html` just inherits from `base_region.html` without any changes
    - `custom_templates/region.html` will be override default.
- option 3: (yep)
    - use lots of importing in templates (like exac)
    - `custom_templates/qq.html` overrides the qq plot. (&c)
    - can we namespace templates? (eg, `custom_templates/region/{base,default,tooltip}.html`)

then what about beta/sebeta in tables?  how to make that automatically be used or not?
- no premature optimization, just make it work
- option 1: (plzno)
    - include beta/sebeta in header and row-template and make js hide it if unused
- option 2: (nope)
    - user is responsible for overriding templates to include it.
- option 3: (yep)
    - make a header-template that takes a {variant: true, beta_sebeta: true, ...}
    - likewise for row-template
    - put these two into a {%block%} for {%extends%}ing them
    - to make a clearer code structure, what if you built those two templates together (eg, `if(beta_sebeta){header_template+=...;row_template+=...}`)

Differences between mgi and sardinia-r2
- config.config (minimum_maf, data_dir)
- 0_0
    - not really my problem, but get it out of pheweb/data/
- phewas_significance_threshold (add to config.py)
- about.html text (make a template `about_content.html`)
- index.html <h2> (make a template `index_headers.html`)
- inclusion of <th>beta (se)</th> on top_hits and others
    - gonna be solved by above approach
- placeholder="..." on variant.html (ie, pheno names)
    - should this automatically be some real phenotypes?
        - just '&quot;{{ phenolist[0].phenostring || phenolist[0].phenocode }&quot;, &quot;{{ ... }}&quot;, etc.'

make a special `./pheweb phenolist augment-like-vb-icd9-phewas`.

remove non-python dependencies:
- use wget (from pypi) instead of /usr/{,local/}bin/wget (https://pypi.python.org/pypi/wget)
- use pysam.tabix_index() instead of `tabix -p vcf <file>`
- is there any way to avoid bgzip?  it's probably somewhere inside pysam, but I don't see it.
'''
